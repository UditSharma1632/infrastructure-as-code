AWSTemplateFormatVersion: "2010-09-09"
Description: This template will create a Ec2 instance and lambda function along with its execution role
Resources:
  MyEC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-08fe36427228eddc4"
      InstanceType: t2.micro
      KeyName: jenkins-key-pair


  AWSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'       
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DeleteSnapshot
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeSnapshots           
                Resource: "*"     
      RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole

  AWSLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "This lambda function will delete unused ebs volumes"
      FunctionName: !Sub ${AWS::StackName}-${AWS::Region}-LambdaFunction
      Handler: index.lambda_handler
      Role: !GetAtt AWSLambdaExecutionRole.Arn
      Timeout: 360
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')

              # Get all EBS snapshots
              response = ec2.describe_snapshots(OwnerIds=['self'])

              # Get all active EC2 instance IDs
              instances_response = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
              active_instance_ids = set()

              for reservation in instances_response['Reservations']:
                  for instance in reservation['Instances']:
                      active_instance_ids.add(instance['InstanceId'])

              # Iterate through each snapshot and delete if it's not attached to any volume or the volume is not attached to a running instance
              for snapshot in response['Snapshots']:
                  snapshot_id = snapshot['SnapshotId']
                  volume_id = snapshot.get('VolumeId')

                  if not volume_id:
                      # Delete the snapshot if it's not attached to any volume
                      ec2.delete_snapshot(SnapshotId=snapshot_id)
                      print(f"Deleted EBS snapshot {snapshot_id} as it was not attached to any volume.")
                  else:
                      # Check if the volume still exists
                      try:
                          volume_response = ec2.describe_volumes(VolumeIds=[volume_id])
                          if not volume_response['Volumes'][0]['Attachments']:
                              ec2.delete_snapshot(SnapshotId=snapshot_id)
                              print(f"Deleted EBS snapshot {snapshot_id} as it was taken from a volume not attached to any running instance.")
                      except ec2.exceptions.ClientError as e:
                          if e.response['Error']['Code'] == 'InvalidVolume.NotFound':
                              # The volume associated with the snapshot is not found (it might have been deleted)
                              ec2.delete_snapshot(SnapshotId=snapshot_id)
                              print(f"Deleted EBS snapshot {snapshot_id} as its associated volume was not found.")
      